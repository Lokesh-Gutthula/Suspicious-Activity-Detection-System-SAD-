# -*- coding: utf-8 -*-
"""Suspicious Activity Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lKwPoTPk4HO6LAuAB0Jh4psJhmfsK9oa
"""

# Mount Google Drive (if not already mounted)
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Define dataset paths
zip_file_path = "/content/drive/MyDrive/Colab Notebooks/Suspicious Dataset.zip"
destination_dir = "/content/suspicious_dataset" #  Path where the dataset will be extracted inside Colab’s temporary storage

print(zip_file_path)
print(destination_dir)

#  re-run this code at the start of every session bcs when colab closes the extracted data in colab's content will be lost

import os
import zipfile
from pathlib import Path

# Unzip Dataset if Not Already Done
if not os.path.exists(destination_dir):
    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
        zip_ref.extractall(destination_dir)
    print(f"Dataset extracted to {destination_dir}")
else:
    print(f"Dataset already exists at {destination_dir}")

# verify dataset structure
print(destination_dir)
train_dir = os.path.join(destination_dir, "MP Dataset/train")
val_dir = os.path.join(destination_dir, "MP Dataset/valid")
test_dir = os.path.join(destination_dir, "MP Dataset/test")

if not os.path.exists(train_dir) or not os.path.exists(val_dir):
    raise FileNotFoundError("Train/Validation folders not found. Ensure the dataset structure is correct.")

print(f"Train Directory: {train_dir}")
print(f"Validation Directory: {val_dir}")
print(f"Test Directory: {test_dir}")

!pip install ultralytics

from ultralytics import YOLO
print(YOLO('yolov8m.pt'))  # Test if YOLOv8 loads correctly

!ls "/content/suspicious_dataset"

import os

# Use the exact folder name with correct casing and spacing
dataset_path = "/content/suspicious_dataset/MP Dataset/"
data_yaml_path = os.path.join(dataset_path, "data.yaml")

print("Checking:", data_yaml_path)

# Now this should work ✅
assert os.path.exists(dataset_path), f"Dataset path not found: {dataset_path}"
assert os.path.exists(data_yaml_path), f"data.yaml not found in {dataset_path}"

print("✅ Dataset and YAML file found:", data_yaml_path)

from ultralytics import YOLO
import torch

# Load YOLOv8 model (use yolov8m.pt for balanced accuracy/speed)
model = YOLO("yolov8m.pt")

model.train(
    data=data_yaml_path,  # Path to dataset config
    epochs=50,  # Increase epochs for better accuracy
    imgsz=640,  # Image size, higher can improve accuracy but needs more memory
    batch=16,  # Reduce if memory issues occur (adjust based on GPU)
    device="cuda",  # Use GPU if available
    # device="cuda" if torch.cuda.is_available() else "cpu",
    workers=2,  # Number of CPU workers (adjust based on Colab resources)
    # project='/content/underwater_dataset/training_results',  # Save results here
    project='/content/drive/MyDrive/Colab Notebooks/training_results',  # Save results to Google Drive
    name='suspicious_model',  # Name of training run
    save=True,  # Save checkpoints
    save_period=10,  # Save model every 10 epochs
    cache=True,  # Cache images to speed up training
)

import torch
print(torch.cuda.is_available())  # Should return True if GPU is available
print(torch.cuda.device_count())  # Number of available GPUs
print(torch.cuda.get_device_name(0) if torch.cuda.is_available() else "No GPU found")

!cp "/content/drive/MyDrive/Colab Notebooks/training_results/suspicious_model2/weights/last.pt" \
    "/content/drive/MyDrive/Colab Notebooks/model_backups/epoch13_last.pt"

# # Resume training (optional)

from ultralytics import YOLO

model = YOLO("/content/drive/MyDrive/Colab Notebooks/training_results/suspicious_model2/weights/last.pt")  # Load last saved model

model.train(
    data="data.yaml",  # Dataset configuration
    epochs=50,  # Continue training until full completion
    imgsz=640,
    batch=16,
    device="cuda",
    project="/content/drive/MyDrive/Colab Notebooks/training_results",
    name="suspicious_model2",
    save=True,
    save_period=10,
    cache=True,
    resume=True  # Resume from last checkpoint
)



from ultralytics import YOLO
import os

# Load the trained model (change path if necessary)
model = YOLO("/content/drive/MyDrive/Colab Notebooks/training_results/suspicious_model2/weights/best.pt")

# Path to test images directory
test_images_dir = "/content/suspicious_dataset/MP Dataset/test/images/"

# Get all images in the directory
image_files = [f for f in os.listdir(test_images_dir) if f.endswith(('.jpg', '.jpeg', '.png'))]

# Directory where you want to save the results
save_dir = '/content/drive/MyDrive/Colab Notebooks/training_results/test_results/'

# Ensure the save directory exists
os.makedirs(save_dir, exist_ok=True)

# Predict on all test images
for image_file in image_files:
    image_path = os.path.join(test_images_dir, image_file)
    results = model(image_path)  # Run prediction on the image

    # The results object is a list. Get the first item to access the result of the prediction.
    result = results[0]

    # Show the image with bounding boxes
    result.show()

    # Save the results with the correct filename
    result.save(filename=os.path.join(save_dir, image_file))







# Example: Resume training later
# After your initial partial training (say you trained for 20 epochs), your results will be saved under:

# /content/drive/MyDrive/Colab Notebooks/training_results/suspicious_model/

# Next time, resume from the last checkpoint like this:

# from ultralytics import YOLO

# # Load the last saved model checkpoint
# model = YOLO("/content/drive/MyDrive/Colab Notebooks/training_results/suspicious_model/weights/last.pt")

# # Resume training from this point
# model.train(
#     data=data_yaml_path,
#     epochs=50,  # total desired epochs (YOLO will train 30 more if 20 already done)
#     resume=True,
#     project='/content/drive/MyDrive/Colab Notebooks/training_results',
#     name='suspicious_model'
# )

# # Resume training (optional)

# from ultralytics import YOLO

# model = YOLO("/content/drive/MyDrive/Colab Notebooks/training_results/underwater_model2/weights/last.pt")  # Load last saved model

# model.train(
#     data="data.yaml",  # Dataset configuration
#     epochs=35,  # Continue training until full completion
#     imgsz=640,
#     batch=16,
#     device="cuda",
#     project="/content/drive/MyDrive/Colab Notebooks/training_results",
#     name="underwater_model2",
#     save=True,
#     save_period=10,
#     cache=True,
#     resume=True  # Resume from last checkpoint
# )

